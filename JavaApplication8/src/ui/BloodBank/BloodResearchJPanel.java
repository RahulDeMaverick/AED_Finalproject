/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.BloodBank;


import Business.EcoSystem;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.jdbcConnection;
import net.proteanit.sql.DbUtils;
import Business.DonorSystem.DonorDirectory;
import javax.swing.JOptionPane;

/**
 *
 * @author kashr
 */
public class BloodResearchJPanel extends javax.swing.JPanel {
        EcoSystem system;
    String DonorAdminID;
    JPanel container;

    /**
     * Creates new form BloodResearchJPanel
     */
    public BloodResearchJPanel(JPanel _container, EcoSystem _business, String _DonorID) {
        initComponents();
         this.system = _business;
         this.DonorAdminID = _DonorID;
         this.container = _container;
         DonorDirectory donordir = new DonorDirectory();
         System.out.println(DonorAdminID);
       jLabel2.setText("Welcome "+ donordir.getName(DonorAdminID)+ " to "+jLabel2.getText());
        addToComboBox(hopistalList());
        setdonorJtable();
    }

   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(204, 0, 51));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/bloodbank.png"))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Forte", 1, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Blood Research Center");

        jLabel3.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Requests from Hospital");

        jTable1.setBorder(new javax.swing.border.MatteBorder(null));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel4.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Donor List");

        jTable2.setBorder(new javax.swing.border.MatteBorder(null));
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Age", "Blood Group", "Phone Number", "insurance Number", "Email Address", "Address", "City"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(0).setResizable(false);
            jTable2.getColumnModel().getColumn(1).setResizable(false);
            jTable2.getColumnModel().getColumn(2).setResizable(false);
            jTable2.getColumnModel().getColumn(3).setResizable(false);
            jTable2.getColumnModel().getColumn(4).setResizable(false);
            jTable2.getColumnModel().getColumn(5).setResizable(false);
            jTable2.getColumnModel().getColumn(6).setResizable(false);
            jTable2.getColumnModel().getColumn(7).setResizable(false);
        }

        jButton3.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jButton3.setText("ASSIGN");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(290, 290, 290)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(486, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 791, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton3)
                .addGap(467, 467, 467))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jButton3)
                .addGap(112, 112, 112))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int requestrow = jTable1.getSelectedRow();
        int donorrow = jTable2.getSelectedRow();
        if(requestrow>-1)
        {if(donorrow>-1)
        { updateWorkRequest("Assigned",jTable2.getValueAt(donorrow,0).toString(),jTable2.getValueAt(donorrow,4).toString(),DonorAdminID,jTable1.getValueAt(requestrow,5).toString());
        }
        else{
        JOptionPane.showMessageDialog(container,"Please select a donor");}
        }
        else
        {
        JOptionPane.showMessageDialog(container,"Please select a Work Request");        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
       String hospitalName = jComboBox1.getSelectedItem().toString();
       if(hospitalName.isEmpty())
       {
       }
       else
       { populateRequestTrue(hospitalName);
       setdonorJtable();
       }
    }//GEN-LAST:event_jComboBox1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables
public ArrayList<String> hopistalList ()
{   ArrayList<String> hospitals = new ArrayList<String>();
    jdbcConnection jdbc = new jdbcConnection();
    Connection conn = jdbc.connect();
    try {
    
    
    ResultSet rs = null;
    
    String sql = "select hospitalName from doctorTable";
    PreparedStatement statement = conn.prepareStatement(sql);
    
    
    statement = conn.prepareStatement(sql);
//    statement.setString(1,userName);
//    statement.setString(2,password);
    //System.out.print(jTextField3.getText());
    
    rs = statement.executeQuery();
    while(rs.next())
    {  hospitals.add(rs.getString("hospitalName"));
    }
    
    
            } catch (SQLException ex) {
                Logger.getLogger(BloodResearchJPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
    finally
    { jdbc.disConnnect(conn);
     
    }
    
return hospitals;
}
public void addToComboBox(ArrayList<String> hospitalNames)
{
    for(int i=0;i<hospitalNames.size();i++)
     { System.out.println(hospitalNames.get(i));
     jComboBox1.addItem(hospitalNames.get(i));
     }
}
    public void populatedonorTable(){  
        
        DonorDirectory donorDir = system.getDonorList();
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        model.setRowCount(0);                
        donorDir.getDirectory().stream().map(item -> {
            Object[] row = new Object[8];
            row[0] = item.getName();
            row[1] = item.getUniqueID();
            row[2] = item.getBloodGroup();
            row[3] = item.getAge();
            row[4] = item.getAddress();
            row[5] = item.getCity();
            row[6] = item.getPhoneNumber();
            row[7] = item.getUniqueID();
            return row;
        }).forEachOrdered(row -> {
            model.addRow(row);
        });
    }
    public void setdonorJtable()
{ jdbcConnection jdbconnection = new jdbcConnection();
 Connection conn = jdbconnection.connect();
        try {
            ResultSet rs = null;
            
            String sql = "SELECT * FROM donorTable WHERE bloodDonation=1 AND organDonation=0";
            PreparedStatement statement = conn.prepareStatement(sql);
            //statement.setInt(1,1);
            
            
            //System.out.print(jTextField3.getText());

            rs = statement.executeQuery();
            DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
            model.setRowCount(0);
            Object[] row = new Object[8];
            while(rs.next())
            { //if(rs.getInt("bloodDonation")==1)
            //{
              row[0] = rs.getString("donorName");
              row[1] = rs.getString("age");
              row[2] = rs.getString("bloodGroup");
              row[3] = rs.getString("phoneNumber");
              row[4] = rs.getString("insuranceNumber");
              row[5] = rs.getString("email");
              row[6] = rs.getString("address");
              row[7] = rs.getString("city");
              model.addRow(row);
           // }
            }
            //jTable1.setModel(DbUtils.resultSetToTableModel(rs));
           
        } catch (SQLException ex) {
            Logger.getLogger(BloodResearchJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally
        {
         jdbconnection.disConnnect(conn);
        }
        
}
    public String populateRequestTrue(String hospitalName)
    {   String message ="";
        jdbcConnection jdbconnection = new jdbcConnection();
 Connection conn = jdbconnection.connect();
        try {
            ResultSet rs = null;
            
            String sql = "SELECT c.id,c.patientID,c.Name,c.Age,c.BloodGroup,c.InsuranceNumber,c.orgon,c.DoctorID,c.Status,b.doctorName FROM hospitalTable a,doctorTable b,requestTable c WHERE c.DoctorID =b.insuranceNumber and a.hospitalName = b.hospitalName and a.hospitalName=?";
            PreparedStatement statement = conn.prepareStatement(sql);
            statement.setString(1,hospitalName);
            
            
            //System.out.print(jTextField3.getText());

            rs = statement.executeQuery();
            jTable1.setModel(DbUtils.resultSetToTableModel(rs));
            DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
            model.setRowCount(0);
            Object[] row = new Object[8];
            while(rs.next())
            { if(rs.getInt("bloodDonation")==1)
            {
              row[0] = rs.getString("donorName");
              row[1] = rs.getString("age");
              row[2] = rs.getString("bloodGroup");
              row[3] = rs.getString("phoneNumber");
              row[4] = rs.getString("insuranceNumber");
              row[5] = rs.getString("email");
              row[6] = rs.getString("address");
              row[7] = rs.getString("city");
              model.addRow(row);
            }
            }
            //jTable1.setModel(DbUtils.resultSetToTableModel(rs));
           
        } catch (SQLException ex) {
            Logger.getLogger(BloodResearchJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally
        {
         jdbconnection.disConnnect(conn);
        }
        return message;
        
    }
    public void updateWorkRequest(String status, String donorName, String donorId, String researcherId, String insuranceNumber)
    {
        jdbcConnection jdbconnection = new jdbcConnection();
    Connection conn = jdbconnection.connect();
        try {
            ResultSet rs = null;
            
            String viewStatement = "UPDATE requestTable SET Status=?,donorName=?, donorId= ?,researcherId=? WHERE insuranceNumber=?";
            PreparedStatement pstmt;
           pstmt = conn.prepareStatement(viewStatement);
           pstmt.setString(1,status);
           pstmt.setString(2, donorName);
           pstmt.setString(3,donorId);
           pstmt.setString(4, researcherId);
           pstmt.setString(5, insuranceNumber);
           
       //    pstmt.setString(6,jLabel15.getText());
            pstmt.executeUpdate();

            
            
            //System.out.print(jTextField3.getText());

//            rs = statement.executeQuery();


}       catch (SQLException ex) {
            Logger.getLogger(BloodResearchJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally
        {
            jdbconnection.disConnnect(conn);
        }
     JOptionPane.showMessageDialog(container,"The donor has been successfully assigned to the request");
}


    

}


